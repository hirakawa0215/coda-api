{"version":3,"sources":["API.js","models/Doc.js","models/Column.js","models/utilities.js","models/Row.js","models/Table.js","models/index.js","index.js"],"names":["API","constructor","token","axios","defaults","baseURL","headers","common","request","url","params","method","data","error","console","Doc","listSections","id","items","map","section","Section","docId","getSection","sectionIdOrName","listFolders","folder","Folder","getFolder","folderIdOrName","listTables","table","Table","getTable","tableIdOrName","Column","formatRows","rows","Error","length","formattedRows","row","hasBoth","some","column","hasOwnProperty","cells","columns","forEach","push","value","Row","listValues","values","update","formattedRow","status","tableId","delete","listColumns","getColumn","columnIdOrName","listRows","getRow","rowIdOrName","insertRows","keyColumns","updateRow","deleteRow","Coda","whoAmI","listDocs","doc","getDoc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAEA,MAAMA,GAAN,CAAU;AAENC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACAC,mBAAMC,QAAN,CAAeC,OAAf,GAAyB,8BAAzB;AACAF,mBAAMC,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASL,KAAM,EAAjE;AACH;;AAED,QAAMM,OAAN,CAAcC,GAAd,EAAmBC,MAAM,GAAG,EAA5B,EAAgCC,MAAM,GAAG,KAAzC,EAAgD;AAC5C,QAAI;AACA,aAAO,MAAM,oBAAM;AAAEA,QAAAA,MAAF;AAAUF,QAAAA,GAAV;AAAeG,QAAAA,IAAI,EAAEF,MAArB;AAA6BA,QAAAA;AAA7B,OAAN,CAAb;AACH,KAFD,CAEE,OAAOG,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ;;AAdK;;eAiBKb;;;;;;;;;;;;;;ACnBf;;;;AAEA,MAAMe,GAAN,CAAU;AACNd,EAAAA,WAAW,CAACD,GAAD,EAAMY,IAAN,EAAY;AACnB,SAAKZ,GAAL,GAAWA,GAAX,CADmB,CAEnB;;AACA,yBAAc,IAAd,EAAoBY,IAApB;AACH;;AAED,QAAMI,YAAN,CAAmBN,MAAnB,EAA2B;AACvB;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,WAAlC,EAA8CP,MAA9C,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,OAAO,IAAI,IAAIC,cAAJ,iCAAiBD,OAAjB;AAA0BE,MAAAA,KAAK,EAAE,KAAKL;AAAtC,OAA1B,CAAP,CAJuB,CAIwD;AAClF;;AAED,QAAMM,UAAN,CAAiBC,eAAjB,EAAkC;AAC9B;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,aAAYO,eAAgB,EAA9D,CAAvB;AACA,WAAO,IAAIH,cAAJ,iCAAiBT,IAAjB;AAAuBU,MAAAA,KAAK,EAAE,KAAKL;AAAnC,OAAP;AACH;;AAED,QAAMQ,WAAN,CAAkBf,MAAlB,EAA0B;AACtB;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,UAAlC,EAA6CP,MAA7C,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeO,MAAM,IAAI,IAAIC,aAAJ,iCAAgBD,MAAhB;AAAwBJ,MAAAA,KAAK,EAAE,KAAKL;AAApC,OAAzB,CAAP,CAJsB,CAIsD;AAC/E;;AAED,QAAMW,SAAN,CAAgBC,cAAhB,EAAgC;AAC5B;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,YAAWY,cAAe,EAA5D,CAAvB;AACA,WAAO,IAAIF,aAAJ,iCAAgBf,IAAhB;AAAsBU,MAAAA,KAAK,EAAE,KAAKL;AAAlC,OAAP;AACH;;AAED,QAAMa,UAAN,GAAmB;AACf;AACA,UAAM;AAAElB,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,SAAlC,CAAvB;AACA,WAAOL,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeY,KAAK,IAAI,IAAIC,YAAJ,CAAU,KAAKhC,GAAf,kCAAyB+B,KAAzB;AAAgCT,MAAAA,KAAK,EAAE,KAAKL;AAA5C,OAAxB,CAAP,CAHe,CAGoE;AACtF;;AAED,QAAMgB,QAAN,CAAeC,aAAf,EAA8B;AAC1B;AACA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKS,EAAG,WAAUiB,aAAc,EAA1D,CAAvB;AACA,WAAO,IAAIF,YAAJ,CAAU,KAAKhC,GAAf,kCAAyBY,IAAzB;AAA+BU,MAAAA,KAAK,EAAE,KAAKL;AAA3C,OAAP;AACH;;AA3CK;;eA8CKF;;;;;;;;;;;;;;AChDf,MAAMoB,MAAN,CAAa;AACTlC,EAAAA,WAAW,CAACW,IAAD,EAAO;AACd;AACA;AACA,yBAAc,IAAd,EAAoBA,IAApB;AACH;;AALQ;;eAQEuB;;;;;;;;;;;;;;;;ACRf;AACA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAEzB;AACA,MAAI,CAAC,sBAAcA,IAAd,CAAL,EAA0B,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AAC1B,MAAI,CAACD,IAAI,CAACE,MAAV,EAAkB,MAAM,IAAID,KAAJ,CAAU,yDAAV,CAAN;AAElB,QAAME,aAAa,GAAGH,IAAI,CAAClB,GAAL,CAASsB,GAAG,IAAI;AAElC;AACA,QAAI,sBAAcA,GAAd,CAAJ,EAAwB;AAEpB;AACA,YAAMC,OAAO,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAM,IAAIA,MAAM,CAACC,cAAP,CAAsB,QAAtB,KAAmCD,MAAM,CAACC,cAAP,CAAsB,OAAtB,CAAtD,CAAhB;AACA,UAAIH,OAAJ,EAAa,OAAO;AAAEI,QAAAA,KAAK,EAAEL;AAAT,OAAP;AACb,YAAM,IAAIH,KAAJ,CAAU,sGAAV,CAAN;AACH,KATiC,CAYlC;AACA;AACA;AACA;AACA;AAEA;;;AACA,UAAMS,OAAO,GAAG,EAAhB;AAEA,uBAAYN,GAAZ,EAAiBO,OAAjB,CAAyBJ,MAAM,IAAI;AAC/BG,MAAAA,OAAO,CAACE,IAAR,CAAa;AAAEL,QAAAA,MAAF;AAAUM,QAAAA,KAAK,EAAET,GAAG,CAACG,MAAD;AAApB,OAAb;AACH,KAFD;AAIA,WAAO;AAAEE,MAAAA,KAAK,EAAEC;AAAT,KAAP;AACH,GA1BqB,CAAtB;AA4BA,SAAOP,aAAP;AACH,CAnCD;;;;;;;;;;;;;;;ACDA;;;;AAEA,MAAMW,GAAN,CAAU;AACNlD,EAAAA,WAAW,CAACD,GAAD,EAAMY,IAAN,EAAY;AACnB,SAAKZ,GAAL,GAAWA,GAAX,CADmB,CAEnB;;AACA,yBAAc,IAAd,EAAoBY,IAApB;AACH,GALK,CAON;;;AACAwC,EAAAA,UAAU,GAAG;AACT,UAAMC,MAAM,GAAG,EAAf;AAEA,uBAAY,KAAKA,MAAjB,EAAyBL,OAAzB,CAAiCJ,MAAM,IAAI;AACvCS,MAAAA,MAAM,CAACJ,IAAP,CAAY;AAAEL,QAAAA,MAAF;AAAUM,QAAAA,KAAK,EAAE,KAAKG,MAAL,CAAYT,MAAZ;AAAjB,OAAZ;AACH,KAFD;AAIA,WAAOS,MAAP;AACH;;AAED,QAAMC,MAAN,CAAab,GAAb,EAAkB;AACd;AACA;AAEA,UAAM,CAACc,YAAD,IAAiB,2BAAW,CAACd,GAAD,CAAX,CAAvB;AACA,UAAM/B,MAAM,GAAG;AAAE+B,MAAAA,GAAG,EAAEc;AAAP,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAM,KAAKxD,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKmC,OAAQ,SAAQ,KAAKxC,EAAG,EAA5E,EAA+EP,MAA/E,EAAuF,KAAvF,CAAzB;AACA,WAAO8C,MAAM,KAAK,GAAlB;AACH;;AAED,QAAME,MAAN,GAAe;AACX;AAEA,UAAM;AAAEF,MAAAA;AAAF,QAAa,MAAM,KAAKxD,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKmC,OAAQ,SAAQ,KAAKxC,EAAG,EAA5E,EAA+E,EAA/E,EAAmF,QAAnF,CAAzB;AACA,WAAOuC,MAAM,KAAK,GAAlB;AACH;;AAlCK;;eAqCKL;;;;;;;;;;;;;;ACvCf;;AACA;;AACA;;;;AAEA,MAAMnB,KAAN,CAAY;AACR/B,EAAAA,WAAW,CAACD,GAAD,EAAMY,IAAN,EAAY;AACnB,SAAKZ,GAAL,GAAWA,GAAX,CADmB,CAEnB;;AACA,yBAAc,IAAd,EAAoBY,IAApB;AACH;;AAED,QAAM+C,WAAN,CAAkBjD,MAAlB,EAA0B;AACtB;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,UAAvD,EAAkEP,MAAlE,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeyB,MAAM,IAAI,IAAIT,eAAJ,iCAAgBS,MAAhB;AAAwBtB,MAAAA,KAAK,EAAE,KAAKA,KAApC;AAA2CmC,MAAAA,OAAO,EAAE,KAAKxC;AAAzD,OAAzB,CAAP,CAJsB,CAI2E;AACpG;;AAED,QAAM2C,SAAN,CAAgBC,cAAhB,EAAgC;AAC5B;AACA,UAAM;AAAEjD,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,YAAW4C,cAAe,EAAjF,CAAvB;AACA,WAAO,IAAI1B,eAAJ,iCAAgBvB,IAAhB;AAAsBU,MAAAA,KAAK,EAAE,KAAKA,KAAlC;AAAyCmC,MAAAA,OAAO,EAAE,KAAKxC;AAAvD,OAAP;AACH;;AAED,QAAM6C,QAAN,CAAepD,MAAf,EAAuB;AACnB;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,OAAvD,EAA+DP,MAA/D,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAesB,GAAG,IAAI,IAAIU,YAAJ,CAAQ,KAAKnD,GAAb,kCAAuByC,GAAvB;AAA4BnB,MAAAA,KAAK,EAAE,KAAKA,KAAxC;AAA+CmC,MAAAA,OAAO,EAAE,KAAKxC;AAA7D,OAAtB,CAAP,CAJmB,CAI+E;AACrG;;AAED,QAAM8C,MAAN,CAAaC,WAAb,EAA0BtD,MAA1B,EAAkC;AAC9B;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,SAAQ+C,WAAY,EAA3E,EAA8EtD,MAA9E,CAAvB;AACA,WAAO,IAAIyC,YAAJ,CAAQ,KAAKnD,GAAb,kCAAuBY,IAAvB;AAA6BU,MAAAA,KAAK,EAAE,KAAKA,KAAzC;AAAgDmC,MAAAA,OAAO,EAAE,KAAKxC;AAA9D,OAAP;AACH,GAhCO,CAkCR;;;AACA,QAAMgD,UAAN,CAAiB5B,IAAI,GAAG,EAAxB,EAA4B6B,UAAU,GAAG,EAAzC,EAA6C;AACzC;AACA;AAEA,UAAM1B,aAAa,GAAG,2BAAWH,IAAX,CAAtB;AACA,UAAM3B,MAAM,GAAG;AAAE2B,MAAAA,IAAI,EAAEG,aAAR;AAAuB0B,MAAAA;AAAvB,KAAf;AAEA,UAAM;AAAEV,MAAAA;AAAF,QAAa,MAAM,KAAKxD,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,OAAvD,EAA+DP,MAA/D,EAAuE,MAAvE,CAAzB;AACA,WAAO8C,MAAM,KAAK,GAAlB;AACH;;AAED,QAAMW,SAAN,CAAgBH,WAAhB,EAA6BvB,GAA7B,EAAkC;AAC9B;AACA;AAEA,UAAM,CAACc,YAAD,IAAiB,KAAKnB,UAAL,CAAgB,CAACK,GAAD,CAAhB,CAAvB;AACA,UAAM/B,MAAM,GAAG;AAAE+B,MAAAA,GAAG,EAAEc;AAAP,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAM,KAAKxD,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,SAAQ+C,WAAY,EAA3E,EAA8EtD,MAA9E,EAAsF,KAAtF,CAAzB;AACA,WAAO8C,MAAM,KAAK,GAAlB;AACH;;AAED,QAAMY,SAAN,CAAgBJ,WAAhB,EAA6B;AACzB;AAEA,UAAM;AAAER,MAAAA;AAAF,QAAa,MAAM,KAAKxD,GAAL,CAASQ,OAAT,CAAkB,SAAQ,KAAKc,KAAM,WAAU,KAAKL,EAAG,SAAQ+C,WAAY,EAA3E,EAA8E,EAA9E,EAAkF,QAAlF,CAAzB;AACA,WAAOR,MAAM,KAAK,GAAlB;AACH;;AA9DO;;eAiEGxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEf;;AACA;;AACA;;AACA;;;;;;;;;;;;;ACHA;;AACA;;;;AAEA,MAAMqC,IAAN,CAAW;AAEPpE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKF,GAAL,GAAW,IAAIA,YAAJ,CAAQE,KAAR,CAAX;AACH;AAED;;;;;;;AAKA,QAAMoE,MAAN,GAAe;AACX,UAAM;AAAE1D,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAiB,SAAjB,CAAvB;AACA,WAAOI,IAAP;AACH;AAED;;;;;;;;AAMA,QAAM2D,QAAN,CAAe7D,MAAM,GAAG,EAAxB,EACA;AACI,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAiB,OAAjB,EAA0BE,MAA1B,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeqD,GAAG,IAAI,IAAIzD,WAAJ,CAAQ,KAAKf,GAAb,EAAkBwE,GAAlB,CAAtB,CAAP,CAFJ,CAE0D;AACzD;;AAED,QAAMC,MAAN,CAAaxD,EAAb,EAAiB;AACb,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQS,EAAG,EAA7B,CAAvB;AACA,WAAO,IAAIF,WAAJ,CAAQ,KAAKf,GAAb,EAAkBY,IAAlB,CAAP;AACH;;AAED,QAAMI,YAAN,CAAmBM,KAAnB,EAA0BZ,MAA1B,EAAkC;AAC9B;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,WAAhC,EAA4CZ,MAA5C,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,OAAO,IAAI,IAAIC,eAAJ,iCAAiBD,OAAjB;AAA0BE,MAAAA;AAA1B,OAA1B,CAAP,CAJ8B,CAIwC;AACzE;;AAED,QAAMC,UAAN,CAAiBD,KAAjB,EAAwBE,eAAxB,EAAyC;AACrC;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,aAAYE,eAAgB,EAA5D,CAAvB;AACA,WAAO,IAAIH,eAAJ,iCAAiBT,IAAjB;AAAuBU,MAAAA;AAAvB,OAAP;AACH;;AAED,QAAMG,WAAN,CAAkBH,KAAlB,EAAyBZ,MAAzB,EAAiC;AAC7B;AACA;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,UAAhC,EAA2CZ,MAA3C,CAAvB;AACA,WAAOE,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeO,MAAM,IAAI,IAAIC,cAAJ,iCAAgBD,MAAhB;AAAwBJ,MAAAA;AAAxB,OAAzB,CAAP,CAJ6B,CAIsC;AACtE;;AAED,QAAMM,SAAN,CAAgBN,KAAhB,EAAuBO,cAAvB,EAAuC;AACnC;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,YAAWO,cAAe,EAA1D,CAAvB;AACA,WAAO,IAAIF,cAAJ,iCAAgBf,IAAhB;AAAsBU,MAAAA;AAAtB,OAAP;AACH;;AAED,QAAMQ,UAAN,CAAiBR,KAAjB,EAAwB;AACpB;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,SAAhC,CAAvB;AACA,WAAOV,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeY,KAAK,IAAI,IAAIC,aAAJ,CAAU,KAAKhC,GAAf,kCAAyB+B,KAAzB;AAAgCT,MAAAA;AAAhC,OAAxB,CAAP,CAHoB,CAGsD;AAC7E;;AAED,QAAMW,QAAN,CAAeX,KAAf,EAAsBY,aAAtB,EAAqC;AACjC;AACA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAM,KAAKZ,GAAL,CAASQ,OAAT,CAAkB,SAAQc,KAAM,WAAUY,aAAc,EAAxD,CAAvB;AACA,WAAO,IAAIF,aAAJ,CAAU,KAAKhC,GAAf,kCAAyBY,IAAzB;AAA+BU,MAAAA;AAA/B,OAAP;AACH;;AArEM;;eAwEI+C","file":"index.map","sourceRoot":"../src","sourcesContent":["\nimport axios from 'axios';\n\nclass API {\n\n    constructor(token) {\n        // set up axios defaults\n        axios.defaults.baseURL = 'https://coda.io/apis/v1beta1';\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n\n    async request(url, params = {}, method = 'GET') {\n        try {\n            return await axios({ method, url, data: params, params });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n}\n\nexport default API;\n","\nimport { Table, Section, Folder } from './index';\n\nclass Doc {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (id, type, href, browserLink, name, owner, createdAt, updatedAt)\n        Object.assign(this, data);\n    }\n\n    async listSections(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listSections\n        const { data } = await this.API.request(`/docs/${this.id}/sections`, params);\n        return data.items.map(section => new Section({ ...section, docId: this.id })); // map all items into sections\n    }\n\n    async getSection(sectionIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getSection\n        const { data } = await this.API.request(`/docs/${this.id}/sections/${sectionIdOrName}`);\n        return new Section({ ...data, docId: this.id });\n    }\n\n    async listFolders(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listFolders\n        const { data } = await this.API.request(`/docs/${this.id}/folders`, params);\n        return data.items.map(folder => new Folder({ ...folder, docId: this.id })); // map all items into folders\n    }\n\n    async getFolder(folderIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getFolder\n        const { data } = await this.API.request(`/docs/${this.id}/folders/${folderIdOrName}`);\n        return new Folder({ ...data, docId: this.id });\n    }\n\n    async listTables() {\n        // https://coda.io/developers/apis/v1beta1#operation/listTables\n        const { data } = await this.API.request(`/docs/${this.id}/tables`);\n        return data.items.map(table => new Table(this.API, { ...table, docId: this.id })); // map all items into tables\n    }\n\n    async getTable(tableIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getTable\n        const { data } = await this.API.request(`/docs/${this.id}/tables/${tableIdOrName}`);\n        return new Table(this.API, { ...data, docId: this.id });\n    }\n}\n\nexport default Doc;\n","\nclass Column {\n    constructor(data) {\n        // set properties (docId, tableId, id, type, href, name, display, calculated)\n        // TODO: possibly need to set calculated to false if it property doesn't exist\n        Object.assign(this, data);\n    }\n}\n\nexport default Column;\n","\n// formats each row based on whether it is in object or array format\nconst formatRows = (rows) => {\n\n    // error handling\n    if (!Array.isArray(rows)) throw new Error('`rows` must be an array');\n    if (!rows.length) throw new Error('Must include at least one row when calling `insertRows`');\n\n    const formattedRows = rows.map(row => {\n\n        // detect if array (containing column objects) - the alternative being one object\n        if (Array.isArray(row)) {\n\n            // detect if rows already have column and value as separate properties\n            const hasBoth = row.some(column => column.hasOwnProperty('column') && column.hasOwnProperty('value')); \n            if (hasBoth) return { cells: row };\n            throw new Error('A row must either be an array of objects for each column, or else one object of column/value pairs..');\n        }\n\n\n        // // otherwise format it by splitting key/value pairs\n        // const formattedRows = row.map(column => {\n        //     const [column, value] = Object.entries(column)[0];\n        //     return { column, value };\n        // });\n\n        // keys are acting as column ID/name\n        const columns = [];\n\n        Object.keys(row).forEach(column => {\n            columns.push({ column, value: row[column] });\n        });\n\n        return { cells: columns };\n    });\n\n    return formattedRows;\n};\n\nexport { formatRows };\n","\nimport { formatRows } from './utilities';\n\nclass Row {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (docId, tableId, id, type, href, name, index, browserLink, createdAt, updatedAt, values (object))\n        Object.assign(this, data);\n    }\n\n    // format values as key/value pair array instead of as object\n    listValues() {\n        const values = [];\n\n        Object.keys(this.values).forEach(column => {\n            values.push({ column, value: this.values[column] });\n        });\n\n        return values;\n    }\n\n    async update(row) {\n        // params: row (array - required)\n        // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n        const [formattedRow] = formatRows([row]);\n        const params = { row: formattedRow };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, params, 'PUT');\n        return status === 202;\n    }\n\n    async delete() {\n        // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, {}, 'DELETE');\n        return status === 202;\n    }\n}\n\nexport default Row;\n","\nimport Column from './Column';\nimport Row from './Row';\nimport { formatRows } from './utilities';\n\nclass Table {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (docId, id, type, href, browserLink, name, displayColumn (object), rowCount, createdAt, updatedAt, sorts, layout)\n        Object.assign(this, data);\n    }\n\n    async listColumns(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listColumns\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns`, params);\n        return data.items.map(column => new Column({ ...column, docId: this.docId, tableId: this.id })); // map all items into Columns\n    }\n\n    async getColumn(columnIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns/${columnIdOrName}`);\n        return new Column({ ...data, docId: this.docId, tableId: this.id });\n    }\n\n    async listRows(params) {\n        // params: query, useColumnNames, limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listRows\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params);\n        return data.items.map(row => new Row(this.API, { ...row, docId: this.docId, tableId: this.id })); // map all items into Columns\n    }\n\n    async getRow(rowIdOrName, params) {\n        // params: useColumnNames\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params);\n        return new Row(this.API, { ...data, docId: this.docId, tableId: this.id });\n    }\n\n    // upserts rows\n    async insertRows(rows = [], keyColumns = []) {\n        // params: rows (array - required), keyColumns (array)\n        // https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\n        const formattedRows = formatRows(rows);\n        const params = { rows: formattedRows, keyColumns };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params, 'POST');\n        return status === 202;\n    }\n\n    async updateRow(rowIdOrName, row) {\n        // params: row (array - required)\n        // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n        const [formattedRow] = this.formatRows([row]);\n        const params = { row: formattedRow };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params, 'PUT');\n        return status === 202;\n    }\n\n    async deleteRow(rowIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, {}, 'DELETE');\n        return status === 202;\n    }\n}\n\nexport default Table;\n","\nimport Doc from './Doc';\nimport Table from './Table';\nimport Row from './Row';\nimport Column from './Column';\n\nexport { Doc, Table, Row, Column };\n","\nimport API from './API';\nimport { Doc, Table, Section, Folder } from './models';\n\nclass Coda {\n\n    constructor(token) {\n        this.API = new API(token);\n    }\n\n    /**\n     * Returns information about the user.\n     * \n     * @return object \n     */\n    async whoAmI() {\n        const { data } = await this.API.request('/whoami');\n        return data;\n    }\n\n    /**\n     * Returns an array of docs.\n     * \n     * @param array $params Optional query parameters listed here https://coda.io/developers/apis/v1beta1#operation/listDocs\n     * @return array \n     */\n    async listDocs(params = {})\n    {\n        const { data } = await this.API.request('/docs', params);\n        return data.items.map(doc => new Doc(this.API, doc)); // map all items into docs\n    }\n\n    async getDoc(id) {\n        const { data } = await this.API.request(`/docs/${id}`);\n        return new Doc(this.API, data);\n    }\n\n    async listSections(docId, params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listSections\n        const { data } = await this.API.request(`/docs/${docId}/sections`, params);\n        return data.items.map(section => new Section({ ...section, docId })); // map all items into sections\n    }\n\n    async getSection(docId, sectionIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getSection\n        const { data } = await this.API.request(`/docs/${docId}/sections/${sectionIdOrName}`);\n        return new Section({ ...data, docId });\n    }\n\n    async listFolders(docId, params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listFolders\n        const { data } = await this.API.request(`/docs/${docId}/folders`, params);\n        return data.items.map(folder => new Folder({ ...folder, docId })); // map all items into folders\n    }\n\n    async getFolder(docId, folderIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getFolder\n        const { data } = await this.API.request(`/docs/${docId}/folders/${folderIdOrName}`);\n        return new Folder({ ...data, docId });\n    }\n\n    async listTables(docId) {\n        // https://coda.io/developers/apis/v1beta1#operation/listTables\n        const { data } = await this.API.request(`/docs/${docId}/tables`);\n        return data.items.map(table => new Table(this.API, { ...table, docId })); // map all items into tables\n    }\n\n    async getTable(docId, tableIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getTable\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableIdOrName}`);\n        return new Table(this.API, { ...data, docId });\n    }\n}\n\nexport default Coda;\n"]}