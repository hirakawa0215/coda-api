{"version":3,"sources":["API.js","models/Doc.js","models/Column.js","models/utilities.js","models/Row.js","models/Table.js","models/index.js","index.js"],"names":["API","constructor","token","defaults","baseURL","headers","common","request","url","params","method","data","error","console","Doc","listSections","id","items","map","section","Section","docId","getSection","sectionIdOrName","listFolders","folder","Folder","getFolder","folderIdOrName","listTables","table","Table","getTable","tableIdOrName","Column","formatRows","rows","Error","length","formattedRows","row","hasBoth","some","column","hasOwnProperty","cells","columns","forEach","push","value","Row","listValues","values","update","formattedRow","status","tableId","delete","listColumns","getColumn","columnIdOrName","listRows","getRow","rowIdOrName","insertRows","keyColumns","updateRow","deleteRow","Coda","whoAmI","listDocs","doc","getDoc","printMsg","log"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["\nimport axios from 'axios';\n\nclass API {\n\n    constructor(token) {\n        // set up axios defaults\n        axios.defaults.baseURL = 'https://coda.io/apis/v1beta1';\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n\n    async request(url, params = {}, method = 'GET') {\n        try {\n            return await axios({ method, url, data: params, params });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n}\n\nexport default API;\n","\nimport { Table, Section, Folder } from './index';\n\nclass Doc {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (id, type, href, browserLink, name, owner, createdAt, updatedAt)\n        Object.assign(this, data);\n    }\n\n    async listSections(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listSections\n        const { data } = await this.API.request(`/docs/${this.id}/sections`, params);\n        return data.items.map(section => new Section({ ...section, docId: this.id })); // map all items into sections\n    }\n\n    async getSection(sectionIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getSection\n        const { data } = await this.API.request(`/docs/${this.id}/sections/${sectionIdOrName}`);\n        return new Section({ ...data, docId: this.id });\n    }\n\n    async listFolders(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listFolders\n        const { data } = await this.API.request(`/docs/${this.id}/folders`, params);\n        return data.items.map(folder => new Folder({ ...folder, docId: this.id })); // map all items into folders\n    }\n\n    async getFolder(folderIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getFolder\n        const { data } = await this.API.request(`/docs/${this.id}/folders/${folderIdOrName}`);\n        return new Folder({ ...data, docId: this.id });\n    }\n\n    async listTables() {\n        // https://coda.io/developers/apis/v1beta1#operation/listTables\n        const { data } = await this.API.request(`/docs/${this.id}/tables`);\n        return data.items.map(table => new Table(this.API, { ...table, docId: this.id })); // map all items into tables\n    }\n\n    async getTable(tableIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getTable\n        const { data } = await this.API.request(`/docs/${this.id}/tables/${tableIdOrName}`);\n        return new Table(this.API, { ...data, docId: this.id });\n    }\n}\n\nexport default Doc;\n","\nclass Column {\n    constructor(data) {\n        // set properties (docId, tableId, id, type, href, name, display, calculated)\n        // TODO: possibly need to set calculated to false if it property doesn't exist\n        Object.assign(this, data);\n    }\n}\n\nexport default Column;\n","\n// formats each row based on whether it is in object or array format\nconst formatRows = (rows) => {\n\n    // error handling\n    if (!Array.isArray(rows)) throw new Error('`rows` must be an array');\n    if (!rows.length) throw new Error('Must include at least one row when calling `insertRows`');\n\n    const formattedRows = rows.map(row => {\n\n        // detect if array (containing column objects) - the alternative being one object\n        if (Array.isArray(row)) {\n\n            // detect if rows already have column and value as separate properties\n            const hasBoth = row.some(column => column.hasOwnProperty('column') && column.hasOwnProperty('value')); \n            if (hasBoth) return { cells: row };\n            throw new Error('A row must either be an array of objects for each column, or else one object of column/value pairs..');\n        }\n\n\n        // // otherwise format it by splitting key/value pairs\n        // const formattedRows = row.map(column => {\n        //     const [column, value] = Object.entries(column)[0];\n        //     return { column, value };\n        // });\n\n        // keys are acting as column ID/name\n        const columns = [];\n\n        Object.keys(row).forEach(column => {\n            columns.push({ column, value: row[column] });\n        });\n\n        return { cells: columns };\n    });\n\n    return formattedRows;\n};\n\nexport { formatRows };\n","\nimport { formatRows } from './utilities';\n\nclass Row {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (docId, tableId, id, type, href, name, index, browserLink, createdAt, updatedAt, values (object))\n        Object.assign(this, data);\n    }\n\n    // format values as key/value pair array instead of as object\n    listValues() {\n        const values = [];\n\n        Object.keys(this.values).forEach(column => {\n            values.push({ column, value: this.values[column] });\n        });\n\n        return values;\n    }\n\n    async update(row) {\n        // params: row (array - required)\n        // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n        const [formattedRow] = formatRows([row]);\n        const params = { row: formattedRow };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, params, 'PUT');\n        return status === 202;\n    }\n\n    async delete() {\n        // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, {}, 'DELETE');\n        return status === 202;\n    }\n}\n\nexport default Row;\n","\nimport Column from './Column';\nimport Row from './Row';\nimport { formatRows } from './utilities';\n\nclass Table {\n    constructor(API, data) {\n        this.API = API;\n        // set properties (docId, id, type, href, browserLink, name, displayColumn (object), rowCount, createdAt, updatedAt, sorts, layout)\n        Object.assign(this, data);\n    }\n\n    async listColumns(params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listColumns\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns`, params);\n        return data.items.map(column => new Column({ ...column, docId: this.docId, tableId: this.id })); // map all items into Columns\n    }\n\n    async getColumn(columnIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns/${columnIdOrName}`);\n        return new Column({ ...data, docId: this.docId, tableId: this.id });\n    }\n\n    async listRows(params) {\n        // params: query, useColumnNames, limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listRows\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params);\n        return data.items.map(row => new Row(this.API, { ...row, docId: this.docId, tableId: this.id })); // map all items into Rows\n    }\n\n    async getRow(rowIdOrName, params) {\n        // params: useColumnNames\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params);\n        return new Row(this.API, { ...data, docId: this.docId, tableId: this.id });\n    }\n\n    // upserts rows\n    async insertRows(rows = [], keyColumns = []) {\n        // params: rows (array - required), keyColumns (array)\n        // https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\n        const formattedRows = formatRows(rows);\n        const params = { rows: formattedRows, keyColumns };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params, 'POST');\n        return status === 202;\n    }\n\n    async updateRow(rowIdOrName, row) {\n        // params: row (array - required)\n        // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n        const [formattedRow] = formatRows([row]);\n        const params = { row: formattedRow };\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params, 'PUT');\n        return status === 202;\n    }\n\n    async deleteRow(rowIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n        const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, {}, 'DELETE');\n        return status === 202;\n    }\n}\n\nexport default Table;\n","\nimport Doc from './Doc';\nimport Table from './Table';\nimport Row from './Row';\nimport Column from './Column';\n\nexport { Doc, Table, Row, Column };\n","\nimport API from './API';\nimport { Doc, Table, Section, Folder } from './models';\nimport { formatRows } from './models/utilities';\n\nclass Coda {\n\n    constructor(token) {\n        this.API = new API(token);\n    }\n\n    /**\n     * Returns information about the user.\n     * \n     * @return object \n     */\n    async whoAmI() {\n        const { data } = await this.API.request('/whoami');\n        return data;\n    }\n\n    /**\n     * Returns an array of docs.\n     * \n     * @param array $params Optional query parameters listed here https://coda.io/developers/apis/v1beta1#operation/listDocs\n     * @return array \n     */\n    async listDocs(params = {})\n    {\n        const { data } = await this.API.request('/docs', params);\n        return data.items.map(doc => new Doc(this.API, doc)); // map all items into docs\n    }\n\n    async getDoc(id) {\n        const { data } = await this.API.request(`/docs/${id}`);\n        return new Doc(this.API, data);\n    }\n\n    async listSections(docId, params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listSections\n        const { data } = await this.API.request(`/docs/${docId}/sections`, params);\n        return data.items.map(section => new Section({ ...section, docId })); // map all items into sections\n    }\n\n    async getSection(docId, sectionIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getSection\n        const { data } = await this.API.request(`/docs/${docId}/sections/${sectionIdOrName}`);\n        return new Section({ ...data, docId });\n    }\n\n    async listFolders(docId, params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listFolders\n        const { data } = await this.API.request(`/docs/${docId}/folders`, params);\n        return data.items.map(folder => new Folder({ ...folder, docId })); // map all items into folders\n    }\n\n    async getFolder(docId, folderIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getFolder\n        const { data } = await this.API.request(`/docs/${docId}/folders/${folderIdOrName}`);\n        return new Folder({ ...data, docId });\n    }\n\n    async listTables(docId) {\n        // https://coda.io/developers/apis/v1beta1#operation/listTables\n        const { data } = await this.API.request(`/docs/${docId}/tables`);\n        return data.items.map(table => new Table(this.API, { ...table, docId })); // map all items into tables\n    }\n\n    async getTable(docId, tableIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getTable\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableIdOrName}`);\n        return new Table(this.API, { ...data, docId });\n    }\n\n// TODO:\n\n    async listColumns(docId, tableId, params) {\n        // params: limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listColumns\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/columns`, params);\n        return data.items.map(column => new Column({ ...column, docId, tableId })); // map all items into Columns\n    }\n\n    async getColumn(docId, tableId, columnIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/columns/${columnIdOrName}`);\n        return new Column({ ...data, docId, tableId });\n    }\n\n    async listRows(docId, tableId, params) {\n        // params: query, useColumnNames, limit, pageToken\n        // https://coda.io/developers/apis/v1beta1#operation/listRows\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows`, params);\n        return data.items.map(row => new Row(this.API, { ...row, docId, tableId })); // map all items into Rows\n    }\n\n    async getRow(docId, tableId, rowIdOrName, params) {\n        // params: useColumnNames\n        // https://coda.io/developers/apis/v1beta1#operation/getColumn\n        const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, params);\n        return new Row(this.API, { ...data, docId, tableId });\n    }\n\n    // upserts rows\n    async insertRows(docId, tableId, rows = [], keyColumns = []) {\n        // params: rows (array - required), keyColumns (array)\n        // https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\n        const formattedRows = formatRows(rows);\n        const params = { rows: formattedRows, keyColumns };\n\n        const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows`, params, 'POST');\n        return status === 202;\n    }\n\n    async updateRow(docId, tableId, rowIdOrName, row) {\n        // params: row (array - required)\n        // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n        const [formattedRow] = formatRows([row]);\n        const params = { row: formattedRow };\n\n        const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, params, 'PUT');\n        return status === 202;\n    }\n\n    async deleteRow(docId, tableId, rowIdOrName) {\n        // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n        const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, {}, 'DELETE');\n        return status === 202;\n    }\n}\n\nconst printMsg = () => {\n    console.log('Thanks for installing CodaJS!');\n};\n\nexport { printMsg };\n\nexport default Coda;\n"]}