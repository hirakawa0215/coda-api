{"version":3,"file":"index.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/API.ts","../src/models/Doc.ts","../src/models/Column.ts","../src/models/utilities.ts","../src/models/Row.ts","../src/models/Table.ts","../src/models/Section.ts","../src/models/Folder.ts","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios, { AxiosRequestConfig, Method } from 'axios';\n\nclass API {\n  constructor(token: string) {\n    // set up axios defaults\n    axios.defaults.baseURL = 'https://coda.io/apis/v1beta1';\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n\n  async request(url: string, params: any = {}, method: Method = 'GET'): Promise<any> {\n    try {\n      const options: AxiosRequestConfig = ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase()) ? { url, method, data: params } : { url, method, params };\n\n      return await axios(options);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async deleteWithBody(url: string, params: any = {}): Promise<any> {\n    try {\n      const options: AxiosRequestConfig = { url, method: 'DELETE', data: params };\n      return await axios(options);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport default API;\n","import { Table, Section, Folder } from './index';\nimport API from '../API';\n\nclass Doc {\n  API: API;\n  id?: string;\n\n  constructor(API: API, data: any) {\n    this.API = API;\n    // set properties (id, type, href, browserLink, name, owner, createdAt, updatedAt)\n    Object.assign(this, data);\n  }\n\n  async listSections(params: any): Promise<Section[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listSections\n    const { data } = await this.API.request(`/docs/${this.id}/sections`, params);\n    return data.items.map(section => new Section({ ...section, docId: this.id })); // map all items into sections\n  }\n\n  async getSection(sectionIdOrName: string): Promise<Section> {\n    // https://coda.io/developers/apis/v1beta1#operation/getSection\n    const { data } = await this.API.request(`/docs/${this.id}/sections/${sectionIdOrName}`);\n    return new Section({ ...data, docId: this.id });\n  }\n\n  async listFolders(params: any): Promise<Folder[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listFolders\n    const { data } = await this.API.request(`/docs/${this.id}/folders`, params);\n    return data.items.map(folder => new Folder({ ...folder, docId: this.id })); // map all items into folders\n  }\n\n  async getFolder(folderIdOrName: string): Promise<Folder> {\n    // https://coda.io/developers/apis/v1beta1#operation/getFolder\n    const { data } = await this.API.request(`/docs/${this.id}/folders/${folderIdOrName}`);\n    return new Folder({ ...data, docId: this.id });\n  }\n\n  async listTables(): Promise<Table[]> {\n    // https://coda.io/developers/apis/v1beta1#operation/listTables\n    const { data } = await this.API.request(`/docs/${this.id}/tables`);\n    return data.items.map(table => new Table(this.API, { ...table, docId: this.id })); // map all items into tables\n  }\n\n  async getTable(tableIdOrName: string): Promise<Table> {\n    // https://coda.io/developers/apis/v1beta1#operation/getTable\n    const { data } = await this.API.request(`/docs/${this.id}/tables/${tableIdOrName}`);\n    return new Table(this.API, { ...data, docId: this.id });\n  }\n}\n\nexport default Doc;\n","class Column {\n  constructor(data) {\n    // set properties (docId, tableId, id, type, href, name, display, calculated)\n    // TODO: possibly need to set calculated to false if the property doesn't exist\n    Object.assign(this, data);\n  }\n}\n\nexport default Column;\n","// formats each row based on whether it is in object or array format\nconst formatRows = (rows: any[]) => {\n  // error handling\n  if (!Array.isArray(rows)) throw new Error('`rows` must be an array');\n  if (!rows.length) throw new Error('Must include at least one row when calling `insertRows`');\n\n  const formattedRows = rows.map(row => {\n    // detect if array (containing column objects) - the alternative being one object\n    if (Array.isArray(row)) {\n      // detect if rows already have column and value as separate properties\n      const hasBoth = row.some(column => column.hasOwnProperty('column') && column.hasOwnProperty('value'));\n      if (hasBoth) return { cells: row };\n      throw new Error('A row must either be an array of objects for each column, or else one object of column/value pairs..');\n    }\n\n    // // otherwise format it by splitting key/value pairs\n    // const formattedRows = row.map(column => {\n    //     const [column, value] = Object.entries(column)[0];\n    //     return { column, value };\n    // });\n\n    // keys are acting as column ID/name\n    const columns: any[] = [];\n\n    Object.keys(row).forEach(column => {\n      columns.push({ column, value: row[column] });\n    });\n\n    return { cells: columns };\n  });\n\n  return formattedRows;\n};\n\nexport { formatRows };\n","import { formatRows } from './utilities';\nimport API from '../API';\n\nclass Row {\n  API: API;\n  id?: string;\n  docId?: string;\n  tableId?: string;\n  values?: any;\n\n  constructor(API: API, data: any) {\n    this.API = API;\n    // set properties (docId, tableId, id, type, href, name, index, browserLink, createdAt, updatedAt, values (object))\n    Object.assign(this, data);\n  }\n\n  // format values as key/value pair array instead of as object\n  listValues(): any[] {\n    const values: any[] = [];\n\n    Object.keys(this.values).forEach(column => {\n      values.push({ column, value: this.values[column] });\n    });\n\n    return values;\n  }\n\n  async update(row: any): Promise<boolean> {\n    // params: row (array - required)\n    // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n    const [formattedRow] = formatRows([row]);\n    const params = { row: formattedRow };\n\n    const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, params, 'PUT');\n    return status === 202;\n  }\n\n  async delete(): Promise<boolean> {\n    // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n    const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.tableId}/rows/${this.id}`, {}, 'DELETE');\n    return status === 202;\n  }\n}\n\nexport default Row;\n","import Column from './Column';\nimport Row from './Row';\nimport { formatRows } from './utilities';\nimport API from '../API';\n\nclass Table {\n  API: API;\n  id?: string;\n  docId?: string;\n\n  constructor(API: API, data: any) {\n    this.API = API;\n    // set properties (docId, id, type, href, browserLink, name, displayColumn (object), rowCount, createdAt, updatedAt, sorts, layout)\n    Object.assign(this, data);\n  }\n\n  async listColumns(params: any): Promise<Column[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listColumns\n    const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns`, params);\n    return data.items.map(column => new Column({ ...column, docId: this.docId, tableId: this.id })); // map all items into Columns\n  }\n\n  async getColumn(columnIdOrName: string): Promise<Column> {\n    // https://coda.io/developers/apis/v1beta1#operation/getColumn\n    const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/columns/${columnIdOrName}`);\n    return new Column({ ...data, docId: this.docId, tableId: this.id });\n  }\n\n  async listRows(params: any): Promise<Row[]> {\n    // params: query, useColumnNames, limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listRows\n    const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params);\n    return data.items.map(row => new Row(this.API, { ...row, docId: this.docId, tableId: this.id })); // map all items into Rows\n  }\n\n  async listRowsPaginatedByToken(params: any): Promise<{ items: Row[]; token: string }> {\n    // params: query, useColumnNames, limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listRows\n    const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params);\n    const items = data.items.map(row => new Row(this.API, { ...row, docId: this.docId, tableId: this.id })); // map all items into Rows\n    return { items, token: data.nextPageToken as string };\n  }\n\n  async getRow(rowIdOrName: string, params: any): Promise<Row> {\n    // params: useColumnNames\n    // https://coda.io/developers/apis/v1beta1#operation/getColumn\n    const { data } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params);\n    return new Row(this.API, { ...data, docId: this.docId, tableId: this.id });\n  }\n\n  // upserts rows\n  async insertRows(rows: any[] = [], keyColumns: any[] = []): Promise<boolean> {\n    // params: rows (array - required), keyColumns (array)\n    // https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\n    const formattedRows = formatRows(rows);\n    const params = { rows: formattedRows, keyColumns };\n\n    const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows`, params, 'POST');\n    return status === 202;\n  }\n\n  async updateRow(rowIdOrName: string, row: any): Promise<boolean> {\n    // params: row (array - required)\n    // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n    const [formattedRow] = formatRows([row]);\n    const params = { row: formattedRow };\n\n    const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, params, 'PUT');\n    return status === 202;\n  }\n\n  async deleteRow(rowIdOrName: string): Promise<boolean> {\n    // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n    const { status } = await this.API.request(`/docs/${this.docId}/tables/${this.id}/rows/${rowIdOrName}`, {}, 'DELETE');\n    return status === 202;\n  }\n\n  async deleteRows(rowIds: string[]): Promise<boolean> {\n    // https://coda.io/developers/apis/v1beta1#operation/deleteRows\n\n    const params = { rowIds };\n    const { status } = await this.API.deleteWithBody(`/docs/${this.docId}/tables/${this.id}/rows`, params);\n    return status === 202;\n  }\n}\n\nexport default Table;\n","class Section {\n  constructor(data: any) {\n    // set properties (docId, id, type, href, name, browserLink)\n    Object.assign(this, data);\n  }\n}\n\nexport default Section;\n","class Folder {\n  constructor(data: any) {\n    // set properties (docId, id, type, href, name, children)\n    Object.assign(this, data);\n  }\n}\n\nexport default Folder;\n","import API from './API';\nimport { Doc, Table, Row, Column, Section, Folder } from './models/index';\nimport { formatRows } from './models/utilities';\n\nclass Coda {\n  API: API;\n\n  constructor(token: string) {\n    this.API = new API(token);\n  }\n\n  /**\n   * Returns information about the user.\n   *\n   * @return object\n   */\n  async whoAmI(): Promise<any> {\n    const { data } = await this.API.request('/whoami');\n    return data;\n  }\n\n  /**\n   * Returns an array of docs.\n   *\n   * @param array $params Optional query parameters listed here https://coda.io/developers/apis/v1beta1#operation/listDocs\n   * @return array\n   */\n  async listDocs(params: any = {}): Promise<Doc[]> {\n    const { data } = await this.API.request('/docs', params);\n    return data.items.map(doc => new Doc(this.API, doc)); // map all items into docs\n  }\n\n  async getDoc(id: string): Promise<Doc> {\n    const { data } = await this.API.request(`/docs/${id}`);\n    return new Doc(this.API, data);\n  }\n\n  async listSections(docId: string, params: any): Promise<Section[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listSections\n    const { data } = await this.API.request(`/docs/${docId}/sections`, params);\n    return data.items.map(section => new Section({ ...section, docId })); // map all items into sections\n  }\n\n  async getSection(docId: string, sectionIdOrName: string): Promise<Section> {\n    // https://coda.io/developers/apis/v1beta1#operation/getSection\n    const { data } = await this.API.request(`/docs/${docId}/sections/${sectionIdOrName}`);\n    return new Section({ ...data, docId });\n  }\n\n  async listFolders(docId: string, params: any): Promise<Folder[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listFolders\n    const { data } = await this.API.request(`/docs/${docId}/folders`, params);\n    return data.items.map(folder => new Folder({ ...folder, docId })); // map all items into folders\n  }\n\n  async getFolder(docId: string, folderIdOrName: string): Promise<Folder> {\n    // https://coda.io/developers/apis/v1beta1#operation/getFolder\n    const { data } = await this.API.request(`/docs/${docId}/folders/${folderIdOrName}`);\n    return new Folder({ ...data, docId });\n  }\n\n  async listTables(docId: string): Promise<Table[]> {\n    // https://coda.io/developers/apis/v1beta1#operation/listTables\n    const { data } = await this.API.request(`/docs/${docId}/tables`);\n    return data.items.map(table => new Table(this.API, { ...table, docId })); // map all items into tables\n  }\n\n  async getTable(docId: string, tableIdOrName: string): Promise<Table> {\n    // https://coda.io/developers/apis/v1beta1#operation/getTable\n    const { data } = await this.API.request(`/docs/${docId}/tables/${tableIdOrName}`);\n    return new Table(this.API, { ...data, docId });\n  }\n\n  async listColumns(docId: string, tableId: string, params: any): Promise<Column[]> {\n    // params: limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listColumns\n    const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/columns`, params);\n    return data.items.map(column => new Column({ ...column, docId, tableId })); // map all items into Columns\n  }\n\n  async getColumn(docId: string, tableId: string, columnIdOrName: string): Promise<Column> {\n    // https://coda.io/developers/apis/v1beta1#operation/getColumn\n    const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/columns/${columnIdOrName}`);\n    return new Column({ ...data, docId, tableId });\n  }\n\n  async listRows(docId: string, tableId: string, params: any): Promise<Row[]> {\n    // params: query, useColumnNames, limit, pageToken\n    // https://coda.io/developers/apis/v1beta1#operation/listRows\n    const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows`, params);\n    return data.items.map(row => new Row(this.API, { ...row, docId, tableId })); // map all items into Rows\n  }\n\n  async getRow(docId: string, tableId: string, rowIdOrName: string, params: any): Promise<Row> {\n    // params: useColumnNames\n    // https://coda.io/developers/apis/v1beta1#operation/getColumn\n    const { data } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, params);\n    return new Row(this.API, { ...data, docId, tableId });\n  }\n\n  // upserts rows\n  async insertRows(docId: string, tableId: string, rows: any[] = [], keyColumns: any[] = []): Promise<boolean> {\n    // params: rows (array - required), keyColumns (array)\n    // https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\n    const formattedRows = formatRows(rows);\n    const params = { rows: formattedRows, keyColumns };\n\n    const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows`, params, 'POST');\n    return status === 202;\n  }\n\n  async updateRow(docId: string, tableId: string, rowIdOrName: string, row: any): Promise<boolean> {\n    // params: row (array - required)\n    // https://coda.io/developers/apis/v1beta1#operation/updateRow\n\n    const [formattedRow] = formatRows([row]);\n    const params = { row: formattedRow };\n\n    const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, params, 'PUT');\n    return status === 202;\n  }\n\n  async deleteRow(docId: string, tableId: string, rowIdOrName: string): Promise<boolean> {\n    // https://coda.io/developers/apis/v1beta1#operation/deleteRow\n\n    const { status } = await this.API.request(`/docs/${docId}/tables/${tableId}/rows/${rowIdOrName}`, {}, 'DELETE');\n    return status === 202;\n  }\n\n  async deleteRows(docId: string, tableId: string, rowIds: string[]): Promise<boolean> {\n    // https://coda.io/developers/apis/v1beta1#operation/deleteRows\n\n    const params = { rowIds };\n    const { status } = await this.API.deleteWithBody(`/docs/${docId}/tables/${tableId}/rows`, params);\n    return status === 202;\n  }\n}\n\nexport default Coda;\n"],"names":["_catch","body","recover","result","e","then","Symbol","iterator","asyncIterator","API","constructor","token","axios","defaults","baseURL","headers","common","request","url","params","method","options","includes","toUpperCase","error","console","deleteWithBody","Doc","data","assign","this","listSections","_this","ref","items","map","section","Section","Object","docId","id","getSection","sectionIdOrName","_this2","listFolders","_this3","folder","Folder","getFolder","folderIdOrName","_this4","listTables","_this5","table","Table","getTable","tableIdOrName","_this6","Column","formatRows","rows","Array","isArray","Error","length","row","some","column","hasOwnProperty","cells","columns","keys","forEach","push","value","Row","listValues","values","update","delete","listColumns","getColumn","columnIdOrName","tableId","listRows","listRowsPaginatedByToken","nextPageToken","getRow","rowIdOrName","insertRows","keyColumns","formattedRows","updateRow","deleteRow","deleteRows","rowIds","Coda","whoAmI","listDocs","doc","getDoc","_this8","_this9","_this12","_this13"],"mappings":"4EAkjBO,SAASA,EAAOC,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,EAvZuD,oBAAXG,SAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,qBA6DvD,oBAAXA,SAA0BA,OAAOE,gBAAkBF,OAAOE,cAAgBF,OAAO,0BC/N1I,IAAMG,EACJC,SAAYC,GAEVC,EAAMC,SAASC,QAAU,+BACzBF,EAAMC,SAASE,QAAQC,OAAvB,wBAA2DL,GAGvDM,YAAAA,iBAAQC,EAAaC,EAAkBC,kBAAJ,mBAAqB,mDAEpDC,EAA8B,CAAC,OAAQ,MAAO,SAASC,SAASF,EAAOG,eAAiB,KAAEL,SAAKE,OAAcD,GAAW,KAAED,SAAKE,SAAQD,0BAEhIP,EAAMS,cACZG,GACPC,QAAQD,MAAMA,0CAIZE,YAAAA,wBAAeR,EAAaC,kBAAc,mEAG/BP,EADuB,KAAEM,SAAa,cAAgBC,eAE5DK,GACPC,QAAQD,MAAMA,0CCrBpB,IAAMG,EAIJjB,SAAYD,EAAUmB,QACfnB,IAAMA,SAEJoB,OAAOC,KAAMF,IAGhBG,YAAAA,sBAAaZ,aAGMW,4BAAAE,EAAKvB,IAAIQ,iBAAiBe,iBAAoBb,kBAA/Dc,iBACMC,MAAMC,aAAIC,UAAW,IAAIC,EAAQC,iBAAKF,GAASG,MAAOP,EAAKQ,8CAGnEC,YAAAA,oBAAWC,aAEQZ,4BAAAa,EAAKlC,IAAIQ,iBAAiB0B,kBAAoBD,kBAA/DT,UACC,IAAII,EAAQC,yBAAWC,MAAOI,EAAKH,4CAGtCI,YAAAA,qBAAYzB,aAGOW,4BAAAe,EAAKpC,IAAIQ,iBAAiB4B,gBAAmB1B,kBAA9Dc,iBACMC,MAAMC,aAAIW,UAAU,IAAIC,EAAOT,iBAAKQ,GAAQP,MAAOM,EAAKL,8CAGhEQ,YAAAA,mBAAUC,aAESnB,4BAAAoB,EAAKzC,IAAIQ,iBAAiBiC,iBAAmBD,kBAA9DhB,UACC,IAAIc,EAAOT,yBAAWC,MAAOW,EAAKV,4CAGrCW,YAAAA,gCAEmBrB,4BAAAsB,EAAK3C,IAAIQ,iBAAiBmC,+BAA3CnB,iBACMC,MAAMC,aAAIkB,UAAS,IAAIC,EAAMF,EAAK3C,IAAK6B,iBAAKe,GAAOd,MAAOa,EAAKZ,8CAGvEe,YAAAA,kBAASC,aAEU1B,4BAAA2B,EAAKhD,IAAIQ,iBAAiBwC,gBAAkBD,kBAA7DvB,UACC,IAAIqB,EAAMG,EAAKhD,IAAK6B,yBAAWC,MAAOkB,EAAKjB,4CChDtD,IAAMkB,EACJhD,SAAYkB,UAGHC,OAAOC,KAAMF,ICHlB+B,WAAcC,OAEbC,MAAMC,QAAQF,GAAO,MAAM,IAAIG,MAAM,+BACrCH,EAAKI,OAAQ,MAAM,IAAID,MAAM,kEAEZH,EAAKzB,aAAI8B,MAEzBJ,MAAMC,QAAQG,GAAM,IAENA,EAAIC,cAAKC,UAAUA,EAAOC,eAAe,WAAaD,EAAOC,eAAe,WAC/E,MAAO,CAAEC,MAAOJ,SACvB,IAAIF,MAAM,4GAUZO,EAAiB,UAEvBhC,OAAOiC,KAAKN,GAAKO,iBAAQL,GACvBG,EAAQG,KAAK,QAAEN,EAAQO,MAAOT,EAAIE,OAG7B,CAAEE,MAAOC,MCzBdK,EAOJjE,SAAYD,EAAUmB,QACfnB,IAAMA,SAEJoB,OAAOC,KAAMF,IAItBgD,YAAAA,iCACQC,EAAgB,UAEtBvC,OAAOiC,KAAKzC,KAAK+C,QAAQL,iBAAQL,KACxBM,KAAK,QAAEN,EAAQO,MAAO5C,EAAK+C,OAAOV,OAGpCU,GAGHC,YAAAA,gBAAOb,aAIYN,EAAW,CAACM,2BAGVnC,KAAKrB,IAAIQ,iBAATa,sBAAAA,sBAAAA,QAFV,WAEiG,sBAA1GG,UACY,qDAGd8C,YAAAA,6CAGqBjD,KAAKrB,IAAIQ,iBAATa,sBAAAA,sBAAAA,QAA+E,GAAI,yBAAtGG,UACY,qDCrCtB,IAAMqB,EAKJ5C,SAAYD,EAAUmB,QACfnB,IAAMA,SAEJoB,OAAOC,KAAMF,IAGhBoD,YAAAA,qBAAY7D,aAGOW,4BAAAE,EAAKvB,IAAIQ,iBAAiBe,mBAAqBA,gBAAmBb,kBAAnFc,iBACMC,MAAMC,aAAIgC,UAAU,IAAIT,EAAOpB,iBAAK6B,GAAQ5B,MAAOP,EAAKO,cAAgBP,EAAKQ,8CAGrFyC,YAAAA,mBAAUC,aAESpD,4BAAAa,EAAKlC,IAAIQ,iBAAiB0B,mBAAqBA,iBAAmBuC,kBAAnFjD,UACC,IAAIyB,EAAOpB,yBAAWC,MAAOI,EAAKJ,MAAO4C,QAASxC,EAAKH,4CAG1D4C,YAAAA,kBAASjE,aAGUW,4BAAAe,EAAKpC,IAAIQ,iBAAiB4B,mBAAqBA,aAAgB1B,kBAAhFc,iBACMC,MAAMC,aAAI8B,UAAO,IAAIU,EAAI9B,EAAKpC,IAAK6B,iBAAK2B,GAAK1B,MAAOM,EAAKN,cAAgBM,EAAKL,8CAGtF6C,YAAAA,kCAAyBlE,aAGNW,4BAAAoB,EAAKzC,IAAIQ,iBAAiBiC,mBAAqBA,aAAgB/B,kBAAhFc,sBAEC,OADOL,EAAKM,MAAMC,aAAI8B,UAAO,IAAIU,EAAIzB,EAAKzC,IAAK6B,iBAAK2B,GAAK1B,MAAOW,EAAKX,cAAgBW,EAAKV,QACjF7B,MAAOiB,EAAK0D,qDAGxBC,YAAAA,gBAAOC,EAAqBrE,aAGTW,4BAAAsB,EAAK3C,IAAIQ,iBAAiBmC,mBAAqBA,cAAgBoC,EAAerE,kBAA/Fc,UACC,IAAI0C,EAAIvB,EAAK3C,IAAK6B,yBAAWC,MAAOa,EAAKb,MAAO4C,QAAS/B,EAAKZ,4CAIjEiD,YAAAA,oBAAW7B,EAAkB8B,kBAAJ,mBAAwB,YAI/CC,EAAgBhC,EAAWC,0BAGR9B,KAAKrB,IAAIQ,iBAATa,sBAAAA,gBAFV,MAAQ6D,aAAeD,GAE0D,uBAA1FzD,UACY,qDAGd2D,YAAAA,mBAAUJ,EAAqBvB,aAIZN,EAAW,CAACM,2BAGVnC,KAAKrB,IAAIQ,iBAATa,sBAAAA,iBAA+D0D,EAFzE,WAEgG,sBAAzGvD,UACY,qDAGd4D,YAAAA,mBAAUL,8BAGW1D,KAAKrB,IAAIQ,iBAATa,sBAAAA,iBAA+D0D,EAAe,GAAI,yBAArGvD,UACY,qDAGd6D,YAAAA,oBAAWC,8BAIUjE,KAAKrB,IAAIiB,wBAATI,sBAAAA,gBADV,QAAEiE,mBACX9D,UACY,qDCtFtB,IAAMI,EACJ3B,SAAYkB,UAEHC,OAAOC,KAAMF,ICHlBmB,EACJrC,SAAYkB,UAEHC,OAAOC,KAAMF,ICClBoE,EAGJtF,SAAYC,QACLF,IAAM,IAAIA,EAAIE,IAQfsF,YAAAA,6CACmBnE,KAAKrB,IAAIQ,QAAQ,0BAAlCgB,uDAUFiE,YAAAA,kBAAS/E,kBAAc,cACJW,4BAAAa,EAAKlC,IAAIQ,QAAQ,QAASE,kBAA3Cc,iBACMC,MAAMC,aAAIgE,UAAO,IAAIxE,EAAIgB,EAAKlC,IAAK0F,2CAG3CC,YAAAA,gBAAO5D,aACYV,4BAAAe,EAAKpC,IAAIQ,iBAAiBuB,kBAA3CP,UACC,IAAIN,EAAIkB,EAAKpC,kDAGhBsB,YAAAA,sBAAaQ,EAAepB,8BAGTW,KAAKrB,IAAIQ,iBAAiBsB,cAAkBpB,kBAA7Dc,iBACMC,MAAMC,aAAIC,UAAW,IAAIC,EAAQC,iBAAKF,SAASG,6CAGvDE,YAAAA,oBAAWF,EAAeG,8BAEPZ,KAAKrB,IAAIQ,iBAAiBsB,eAAkBG,kBAA7DT,UACC,IAAII,EAAQC,+BAAWC,2CAG1BK,YAAAA,qBAAYL,EAAepB,8BAGRW,KAAKrB,IAAIQ,iBAAiBsB,aAAiBpB,kBAA5Dc,iBACMC,MAAMC,aAAIW,UAAU,IAAIC,EAAOT,iBAAKQ,SAAQP,6CAGpDS,YAAAA,mBAAUT,EAAeU,8BAENnB,KAAKrB,IAAIQ,iBAAiBsB,cAAiBU,kBAA5DhB,UACC,IAAIc,EAAOT,+BAAWC,2CAGzBY,YAAAA,oBAAWZ,aAEQT,4BAAAuE,EAAK5F,IAAIQ,iBAAiBsB,4BAA3CN,iBACMC,MAAMC,aAAIkB,UAAS,IAAIC,EAAM+C,EAAK5F,IAAK6B,iBAAKe,SAAOd,6CAG3DgB,YAAAA,kBAAShB,EAAeiB,aAEL1B,4BAAAwE,EAAK7F,IAAIQ,iBAAiBsB,aAAgBiB,kBAA3DvB,UACC,IAAIqB,EAAMgD,EAAK7F,IAAK6B,+BAAWC,2CAGlCyC,YAAAA,qBAAYzC,EAAe4C,EAAiBhE,8BAGzBW,KAAKrB,IAAIQ,iBAAiBsB,aAAgB4C,aAAmBhE,kBAA9Ec,iBACMC,MAAMC,aAAIgC,UAAU,IAAIT,EAAOpB,iBAAK6B,SAAQ5B,UAAO4C,6CAG3DF,YAAAA,mBAAU1C,EAAe4C,EAAiBD,8BAEvBpD,KAAKrB,IAAIQ,iBAAiBsB,aAAgB4C,cAAmBD,kBAA9EjD,UACC,IAAIyB,EAAOpB,+BAAWC,UAAO4C,2CAGhCC,YAAAA,kBAAS7C,EAAe4C,EAAiBhE,aAGtBW,4BAAAyE,EAAK9F,IAAIQ,iBAAiBsB,aAAgB4C,UAAgBhE,kBAA3Ec,iBACMC,MAAMC,aAAI8B,UAAO,IAAIU,EAAI4B,EAAK9F,IAAK6B,iBAAK2B,SAAK1B,UAAO4C,6CAG5DI,YAAAA,gBAAOhD,EAAe4C,EAAiBK,EAAqBrE,aAGzCW,4BAAA0E,EAAK/F,IAAIQ,iBAAiBsB,aAAgB4C,WAAgBK,EAAerE,kBAA1Fc,UACC,IAAI0C,EAAI6B,EAAK/F,IAAK6B,+BAAWC,UAAO4C,2CAIvCM,YAAAA,oBAAWlD,EAAe4C,EAAiBvB,EAAkB8B,kBAAJ,mBAAwB,YAI/EC,EAAgBhC,EAAWC,0BAGR9B,KAAKrB,IAAIQ,iBAAiBsB,aAAgB4C,UAFpD,MAAQQ,aAAeD,GAEqD,uBAArFzD,UACY,qDAGd2D,YAAAA,mBAAUrD,EAAe4C,EAAiBK,EAAqBvB,aAI5CN,EAAW,CAACM,2BAGVnC,KAAKrB,IAAIQ,iBAAiBsB,aAAgB4C,WAAgBK,EAFpE,WAE2F,sBAApGvD,UACY,qDAGd4D,YAAAA,mBAAUtD,EAAe4C,EAAiBK,8BAGrB1D,KAAKrB,IAAIQ,iBAAiBsB,aAAgB4C,WAAgBK,EAAe,GAAI,yBAAhGvD,UACY,qDAGd6D,YAAAA,oBAAWvD,EAAe4C,EAAiBY,8BAItBjE,KAAKrB,IAAIiB,wBAAwBa,aAAgB4C,UAD3D,QAAEY,mBACX9D,UACY"}